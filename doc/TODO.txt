acabou-se:
- Estado global centralizado no componente raiz para poder serializar facilmente
- State pode ser nested mas apenas com dados (objectos sem métodos)
- CHATO: passar funções de update à maneira antiga. tentar mitigar demasiadas props através de truques:
    - form inputs podem todos usar a mesma callback e distinguir operação através do name do input
    - ter utilities para editar arrays do state
    - Ter interfaces para entidades geridas (Project, View), usar estas interfaces e spread operator para gerar interfaces
      de props e state e passagem de dados



Outputs expandiveis:
    - Cada starting URL: "XXX bytes loaded <a>show content<a/>", clicar no link abre um popup com o texto
    -

SHORTCOMINGS OF BACKBONE
- The whole events system is not type safe since it is based on strings. Consider switching to signals
- As seen before, there is no direct declarative mapping between a DOM element and a JS reference. JSX solves this
  problem. Right now we're stuck with doing $.find() which is fragile since it's string-based (forgetting a dot before a
  class name will break without warning). I'm starting to think a DSL might be the only solution. I don't know what this
  DSL would look like but it should be as little intrusive as possible. One possibility is to hijack JSX and put react
  to work as a rendering engine only with backbone pulling the strings. Another alternative is to start using Web
  Components: since components are completely isolated it starts making sense to use onClick="..." directly like we did
  in the 90s (kinda like JSX does). Yet another thing I thought about is to have this DSL be a very simple converter of
  XML-based to JS, mimicking what JSX does but in a framework-agnostic way:

    <Container class="my-container">
        <ForEach collection={this.projects}>
            <li class="list-item">
                {project.getName()}
            </li>
        </ForEach>
    </Container>

  ...converts to something like:

    new Container({"class": "my-container"},
        new ForEach({collection: this.projects},
            new Element('li', {"class": "list-item"}, (project) => project.getName())
        )
    )

  There are still some things to decide on, like how to pass a local variable to a child in the case of loops

renren ($el, data) {
		$el.setInner(
				'<hr/>',
				createComponent(
						'<ul class="list-group"/>',
						($ell) => {
							$ell.setInner(
									data.projects.mapTo((project, i) => createComponent(
										`<li class="
												list-group-item
												list-group-item-action
												anansi-clickable
												text-truncate
												${i === data.selectedProjectIndex ? 'active' : ''}
										">
											${project.value.name}
										</li>`
									), ($elll) => {
										$elll.onClick(ev => {
											const newValue = data.selectedProjectIndex.value + 1
											data.selectedProjectIndex.set(newValue)
										})
									})
							)
						}
				)
		)
	}